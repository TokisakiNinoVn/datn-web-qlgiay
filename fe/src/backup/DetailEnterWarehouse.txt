<template>
  <div v-if="visible" class="modal">
    <div class="modal-content">
      <h2>Chi tiết đơn nhập kho</h2>
      <div v-if="enterWarehouse">
        <p><strong>Mã đơn:</strong> {{ enterWarehouse.invoice_code }}</p>
        <p><strong>Số lượng sản phẩm:</strong> {{ enterWarehouse.total_product }}</p>
        <p><strong>Tổng tiền:</strong> {{ formatCurrency(enterWarehouse.total_price) }} VNĐ</p>
        <p><strong>Trạng thái:</strong> {{ formatStatus(enterWarehouse.transaction_status) }}</p>
        <p><strong>Người thực hiện:</strong> {{ enterWarehouse.created_by }}</p>
      </div>
      <div v-else class="loading">Đang tải...</div>
      <button @click="close" class="close-btn">Đóng</button>
    </div>
  </div>
</template>

<script setup>
import { defineProps, defineEmits, ref, watch } from 'vue';
import { getEnterWarehouseByIdApi } from '@/services/modules/enter-warehouse.api';

const props = defineProps({
  enterWarehouseId: {
    type: Number,
    required: true,
  },
  visible: {
    type: Boolean,
    default: false,
  },
});

const emit = defineEmits(['close']);

const enterWarehouse = ref(null);

watch([() => props.enterWarehouseId, () => props.visible], async ([newId, isVisible]) => {
  if (newId && isVisible) {
    try {
      const response = await getEnterWarehouseByIdApi(newId);
      enterWarehouse.value = response.data.data;
    } catch (error) {
      console.error('Error fetching enter warehouse details:', error);
    }
  }
});

const formatCurrency = (value) => {
  return new Intl.NumberFormat('vi-VN').format(parseFloat(value));
};

const formatStatus = (status) => {
  switch (status) {
    case 'pending': return 'Chờ xử lý';
    case 'completed': return 'Hoàn thành';
    case 'cancelled': return 'Đã hủy';
    default: return status;
  }
};

const close = () => {
  emit('close');
};
</script>


<style scoped>
/* Modal Styles */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background: white;
  padding: 0;
  border-radius: 12px;
  width: 90%;
  max-width: 600px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  animation: slideIn 0.3s ease;
}

.modal-header {
  background: #3498db;
  padding: 20px;
  border-radius: 12px 12px 0 0;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h2 {
  margin: 0;
  color: white;
  font-size: 24px;
  font-weight: 600;
}

.modal-close-btn {
  background: none;
  border: none;
  font-size: 22px;
  cursor: pointer;
  color: white;
  transition: transform 0.3s;
}

.modal-close-btn:hover {
  transform: rotate(90deg);
  color: #ecf0f1;
}

.modal-body {
  padding: 25px;
}

.detail-table {
  width: 100%;
  border-collapse: collapse;
}

.detail-table tr {
  border-bottom: 1px solid #e8ecef;
}

.detail-table .label {
  font-weight: 600;
  color: #2c3e50;
  padding: 15px;
  width: 40%;
  background: #f8f9fa;
}

.detail-table .value {
  color: #636e72;
  padding: 15px;
  width: 60%;
}

.modal-footer {
  padding: 15px 25px;
  display: flex;
  justify-content: flex-end;
}

.close-btn {
  background: #e74c3c;
  color: white;
  border: none;
  padding: 12px 20px;
  border-radius: 8px;
  cursor: pointer;
  transition: background 0.3s;
}

.close-btn:hover {
  background: #c0392b;
}

@keyframes slideIn {
  from {
    transform: translateY(-50px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}
</style>