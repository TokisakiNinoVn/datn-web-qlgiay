<template>
  <div class="container">
    <Navbar />
    <div class="main-content">
      <div class="header">
        <h1 class="title">Quản lý sản phẩm</h1>
        <div class="search-bar">
          <div class="search-wrapper">
            <i class="fas fa-search search-icon"></i>
            <input
              type="text"
              v-model="searchQuery"
              placeholder="Tìm kiếm theo tên sản phẩm..."
              class="search-input"
              @keyup.enter="searchProduct"
            />
          </div>
          <button @click="searchProduct" :disabled="isMiniLoading" class="search-btn">
            <i class="fas fa-search"></i>
          </button>
        </div>
      </div>

      <!-- Toolbar -->
      <div class="toolbar">
        <button @click="resetFilters" class="reset-btn">
          <i class="fas fa-sync-alt mr-2"></i> Làm mới
        </button>
        <button @click="filterByStatus(1)" :class="{ 'active': selectedStatus === 1 }" class="filter-btn">
          <i class="fas fa-check-circle mr-2"></i> Còn hàng
        </button>
        <button @click="filterByStatus(0)" :class="{ 'active': selectedStatus === 0 }" class="filter-btn">
          <i class="fas fa-times-circle mr-2"></i> Hết hàng
        </button>
        <button @click="showAddForm" class="add-btn">
          <i class="fas fa-plus mr-2"></i> Thêm sản phẩm
        </button>
      </div>

      <!-- Table -->
      <div class="table-wrapper">
        <table v-if="filteredProducts.length > 0" class="product-table">
          <thead>
            <tr>
              <th class="stt">STT</th>
              <th class="product-name">Tên sản phẩm</th>
              <th class="price">Giá (VNĐ)</th>
              <th class="stock">Số lượng</th>
              <th class="brand">Thương hiệu</th>
              <th class="brand">Giảm giá</th>
              <th class="actions-col">Thao tác</th>
            </tr>
          </thead>
          <tbody>
            <tr v-for="(product, index) in filteredProducts" :key="product.id">
              <td class="stt">{{ index + 1 }}</td>
              <td class="product-name">{{ product.product_name }}</td>
              <td class="price">{{ formatCurrency(product.price) }}</td>
              <td class="stock">{{ product.stock_quantity }}</td>
              <td class="brand">{{ product.brand_name }}</td>
              <td class="stock">{{ product.discount }}</td>
              <td class="actions-col actions">
                <button @click="viewProduct(product)" class="action-btn view" title="Xem chi tiết">
                  <i class="fas fa-eye"></i>
                </button>
                <button @click="showUpdateForm(product)" class="action-btn edit" title="Cập nhật">
                  <i class="fas fa-edit"></i>
                </button>
                <button @click="removeProduct(product.id)" class="action-btn delete" title="Xóa">
                  <i class="fas fa-trash"></i>
                </button>
              </td>
            </tr>
          </tbody>
        </table>
        <div v-else-if="isMiniLoading" class="loading">
          <i class="fas fa-spinner fa-spin mr-2"></i> Đang tải...
        </div>
        <div v-else class="no-data">
          <i class="fas fa-box-open mr-2"></i> Không có dữ liệu sản phẩm
        </div>
      </div>

      <!-- Modals -->
      <ProductDetail :product="productDetail" :visible="showDetail" @close="closeDetail" />
    </div>
  </div>
</template>
<script setup>
import { ref, onBeforeMount, computed } from 'vue';
import Navbar from '@/components/NavbarComponent.vue';
import ProductDetail from './DetailProduct.vue';
import { getAllProductApi, deleteProductApi, getDetailsProductByIdApi } from '@/services/modules/product.api';

const products = ref([]);
const originalProducts = ref([]);
const isMiniLoading = ref(false);
const searchQuery = ref('');
const selectedStatus = ref(null);
const showDetail = ref(false);
const productDetail = ref(null);
const showAddModal = ref(false);
const showUpdateModal = ref(false);
const selectedProduct = ref(null);

onBeforeMount(() => {
  fetchProducts();
});

const fetchProducts = async () => {
  isMiniLoading.value = true;
  try {
    const response = await getAllProductApi();
    const data = Array.isArray(response.data.data) ? response.data.data : [];
    products.value = data;
    originalProducts.value = [...data];
  } catch (error) {
    console.error('Error fetching products:', error);
    products.value = [];
    originalProducts.value = [];
  } finally {
    isMiniLoading.value = false;
  }
};

const formatCurrency = (value) => {
  return new Intl.NumberFormat('vi-VN').format(parseFloat(value));
};

const resetFilters = () => {
  searchQuery.value = '';
  selectedStatus.value = null;
  products.value = [...originalProducts.value];
};

const filterByStatus = (status) => {
  selectedStatus.value = selectedStatus.value === status ? null : status;
  applyFiltersAndSearch();
};

const applyFiltersAndSearch = () => {
  let filtered = [...originalProducts.value];

  if (selectedStatus.value !== null) {
    filtered = filtered.filter(product => product.status === selectedStatus.value);
  }

  if (searchQuery.value) {
    const query = searchQuery.value.toLowerCase();
    filtered = filtered.filter(product =>
      product.product_name.toLowerCase().includes(query) ||
      product.brand_name.toLowerCase().includes(query) ||
      product.warehouse_name.toLowerCase().includes(query)
    );
  }

  products.value = filtered;
  if (!filtered.length && searchQuery.value) {
    alert('Không tìm thấy sản phẩm nào.');
  }
};

const searchProduct = () => {
  applyFiltersAndSearch();
};

const removeProduct = async (id) => {
  if (confirm('Bạn có chắc chắn muốn xóa sản phẩm này?')) {
    try {
      await deleteProductApi(id);
      products.value = products.value.filter(c => c.id !== id);
      originalProducts.value = originalProducts.value.filter(c => c.id !== id);
      alert('Xóa sản phẩm thành công!');
    } catch (error) {
      console.error('Error removing product:', error);
      alert('Có lỗi xảy ra khi xóa sản phẩm.');
    }
  }
};

const viewProduct = async (product) => {
  try {
    const response = await getDetailsProductByIdApi(product.id);
    productDetail.value = response.data || null;
    showDetail.value = true;
  } catch (error) {
    console.error('Error fetching product details:', error);
    alert('Có lỗi xảy ra khi xem chi tiết.');
  }
};

const closeDetail = () => {
  showDetail.value = false;
  productDetail.value = null;
};

const showAddForm = () => {
  showAddModal.value = true;
};

const showUpdateForm = (product) => {
  selectedProduct.value = { ...product };
  showUpdateModal.value = true;
};

const filteredProducts = computed(() => products.value);
</script>
<style scoped>
.container {
  min-height: 100vh;
  background: linear-gradient(120deg, #f9e8d9 0%, #f5c7a9 100%);
  display: flex;
}

.main-content {
  margin-left: 280px;
  width: calc(100% - 280px);
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.title {
  font-size: 2.5rem;
  color: #1a1a1a;
  font-weight: 800;
}

.search-bar {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.search-wrapper {
  position: relative;
}

.search-icon {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #ff6f61;
}

.search-input {
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  width: 300px;
  font-size: 1rem;
}

.search-btn {
  padding: 0.75rem 1.5rem;
  background: #ff6f61;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.search-btn:hover {
  background: #e65b50;
}

.toolbar {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
}

.reset-btn,
.filter-btn,
.add-btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: all 0.3s ease;
}

.reset-btn {
  background: #3498db;
  color: white;
}

.reset-btn:hover {
  background: #2980b9;
}

.filter-btn {
  background: #fff;
  color: #666;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.filter-btn.active {
  background: #ff6f61;
  color: white;
}

.filter-btn:hover:not(.active) {
  background: #f1f1f1;
}

.add-btn {
  background: #2ecc71;
  color: white;
}

.add-btn:hover {
  background: #27ae60;
}

.table-wrapper {
  background: #fff;
  padding: 1.5rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  overflow-x: auto;
}

.product-table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
}

.product-table th,
.product-table td {
  padding: 1.2rem;
  text-align: center;
  border-bottom: 1px solid #e0e0e0;
  border-right: 1px solid #e0e0e0;
}

.product-table th:last-child,
.product-table td:last-child {
  border-right: none;
}

.product-table th {
  background: #f9f9f9;
  font-weight: 600;
  color: #1a1a1a;
  font-size: 1rem;
  text-transform: uppercase;
}

.product-table td {
  color: #666;
  font-size: 0.95rem;
}

/* Định dạng độ rộng cột */
.stt { width: 5%; }
.product-name { width: 20%; text-align: left; }
.price { width: 12%; }
.stock { width: 10%; }
.size { width: 8%; }
.color { width: 10%; }
.warehouse { width: 15%; }
.brand { width: 12%; }
.actions-col { width: 15%; }

.actions {
  display: flex;
  justify-content: center;
  gap: 0.75rem;
}

.action-btn {
  padding: 0.6rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.action-btn.view {
  background: #3498db;
  color: white;
}

.action-btn.edit {
  background: #f1c40f;
  color: white;
}

.action-btn.delete {
  background: #e74c3c;
  color: white;
}

.action-btn:hover {
  opacity: 0.9;
  transform: scale(1.1);
}

.loading,
.no-data {
  text-align: center;
  padding: 2rem;
  color: #666;
  font-size: 1.1rem;
}
</style>
<!-- <style scoped>
.container {
  min-height: 100vh;
  background: linear-gradient(120deg, #f9e8d9 0%, #f5c7a9 100%);
  display: flex;
}

.main-content {
  margin-left: 280px;
  width: calc(100% - 280px);
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.title {
  font-size: 2.5rem;
  color: #1a1a1a;
  font-weight: 800;
}

.search-bar {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.search-wrapper {
  position: relative;
}

.search-icon {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #ff6f61;
}

.search-input {
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 1px solid #ddd;
  border-radius: 8px;
  width: 300px;
  font-size: 1rem;
}

.search-btn {
  padding: 0.75rem 1.5rem;
  background: #ff6f61;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.search-btn:hover {
  background: #e65b50;
}

.toolbar {
  display: flex;
  gap: 1rem;
  margin-bottom: 2rem;
}

.reset-btn, .filter-btn, .add-btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-size: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  transition: all 0.3s ease;
}

.reset-btn {
  background: #3498db;
  color: white;
}

.reset-btn:hover {
  background: #2980b9;
}

.filter-btn {
  background: #fff;
  color: #666;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.filter-btn.active {
  background: #ff6f61;
  color: white;
}

.filter-btn:hover:not(.active) {
  background: #f1f1f1;
}

.add-btn {
  background: #2ecc71;
  color: white;
}

.add-btn:hover {
  background: #27ae60;
}

.table-wrapper {
  background: #fff;
  padding: 1.5rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
}

.product-table {
  width: 100%;
  border-collapse: collapse;
}

.product-table th, .product-table td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid #eee;
}

.product-table th {
  background: #f9f9f9;
  font-weight: 600;
  color: #1a1a1a;
}

.product-table td {
  color: #666;
}

.actions {
  display: flex;
  gap: 0.5rem;
}

.action-btn {
  padding: 0.5rem;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.3s ease;
}

.action-btn.view {
  background: #3498db;
  color: white;
}

.action-btn.edit {
  background: #f1c40f;
  color: white;
}

.action-btn.delete {
  background: #e74c3c;
  color: white;
}

.action-btn:hover {
  opacity: 0.9;
  transform: scale(1.1);
}

.loading, .no-data {
  text-align: center;
  padding: 2rem;
  color: #666;
  font-size: 1.1rem;
}
</style> -->


<!-- <style scoped>
.toolbar i {
  margin-right: 0.5rem;
}
/* General Styles */
.container {
  display: flex;
  min-height: 100vh;
  background: #f0f2f5;
}

.main-content {
  flex: 1;
  margin-left: 260px;
  padding: 2rem;
  background: white;
  border-radius: 16px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
}

/* Header */
.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e8ecef;
}

.title {
  font-size: 2rem;
  color: #2c3e50;
  font-weight: 700;
}

.search-bar {
  display: flex;
  gap: 1rem;
  max-width: 500px;
}

.search-wrapper {
  position: relative;
  flex: 1;
}

.search-icon {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #95a5a6;
}

.search-input {
  width: 80%;
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 1px solid #dfe6e9;
  border-radius: 8px;
  font-size: 1rem;
  transition: border-color 0.3s;
}

.search-input:focus {
  border-color: #3498db;
  outline: none;
  box-shadow: 0 0 5px rgba(52, 152, 219, 0.2);
}

.search-btn {
  padding: 0.75rem 1.5rem;
  background: #3498db;
  color: white;
  border: none;
  border-radius: 8px;
  transition: background 0.3s;
}

.search-btn:hover:not(:disabled) {
  background: #2980b9;
}

.search-btn:disabled {
  background: #95a5a6;
  cursor: not-allowed;
}

/* Toolbar */
.toolbar {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
  flex-wrap: wrap;
}

.reset-btn, .add-btn, .filter-btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  color: white;
  display: flex;
  align-items: center;
  transition: background 0.3s;
  font-weight: 500;
}

.reset-btn {
  background: #95a5a6;
}

.reset-btn:hover {
  background: #7f8c8d;
}

.filter-btn {
  background: #34495e;
}

.filter-btn:hover {
  background: #2c3e50;
}

.filter-btn.active {
  background: #e67e22;
}

.add-btn {
  background: #2ecc71;
}

.add-btn:hover {
  background: #27ae60;
}

/* Table */
.table-wrapper {
  background: white;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
  overflow-x: auto;
}

.product-table {
  width: 100%;
  border-collapse: collapse;
}

.product-table th, .product-table td {
  padding: 1rem;
  text-align: center;
}

.product-table th {
  background: #f8f9fa;
  color: #2c3e50;
  font-weight: 600;
  font-size: 15px;
  border-bottom: 2px solid #e8ecef;
}

.product-table td {
  color: #636e72;
  font-size: 14px;
  border-bottom: 1px solid #e8ecef;
}

.product-table tr:hover {
  background: #f8f9fa;
}

.actions {
  display: flex;
  justify-content: center;
  gap: 0.75rem;
}

.action-btn {
  padding: 0.5rem;
  border: none;
  border-radius: 50%;
  background: transparent;
  transition: all 0.3s;
}

.action-btn i {
  font-size: 1.1rem;
}

.edit { color: #f1c40f; }
.edit:hover { background: #f1c40f; color: white; }

.view { color: #3498db; }
.view:hover { background: #3498db; color: white; }

.delete { color: #e74c3c; }
.delete:hover { background: #e74c3c; color: white; }

/* Loading and No Data */
.loading {
  text-align: center;
  padding: 2rem;
  color: #7f8c8d;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.no-data {
  text-align: center;
  padding: 2rem;
  color: #7f8c8d;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

/* Modal Overlay */
.modal-overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000;
}
</style> -->